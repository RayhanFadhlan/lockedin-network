datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            BigInt     @id @default(autoincrement())
  username      String     @unique
  email         String     @unique
  passwordHash  String     @map("password_hash")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  
  // Relations
  feeds         Feed[]
  sentChats     Chat[]     @relation("SentChats")
  receivedChats Chat[]     @relation("ReceivedChats")
  sentRequests  ConnectionRequest[] @relation("SentRequests")
  receivedRequests ConnectionRequest[] @relation("ReceivedRequests")
  sentConnections Connection[] @relation("SentConnections")
  receivedConnections Connection[] @relation("ReceivedConnections")
  pushSubscriptions PushSubscription[]

  @@map("users")
}

model Feed {
  id        BigInt    @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  content   String
  userId    BigInt    @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("feed")
}

model Chat {
  id        BigInt    @id @default(autoincrement())
  timestamp DateTime  @default(now())
  message   String
  fromId    BigInt    @map("from_id")
  toId      BigInt    @map("to_id")
  
  // Relations
  fromUser  User      @relation("SentChats", fields: [fromId], references: [id], onDelete: Cascade)
  toUser    User      @relation("ReceivedChats", fields: [toId], references: [id], onDelete: Cascade)

  @@map("chat")
}

model ConnectionRequest {
  fromId    BigInt    @map("from_id")
  toId      BigInt    @map("to_id")
  createdAt DateTime  @map("created_at")

  // Relations
  fromUser  User      @relation("SentRequests", fields: [fromId], references: [id], onDelete: Cascade)
  toUser    User      @relation("ReceivedRequests", fields: [toId], references: [id], onDelete: Cascade)

  @@id([fromId, toId])
  @@map("connection_request")
}

model Connection {
  fromId    BigInt    @map("from_id")
  toId      BigInt    @map("to_id")
  createdAt DateTime  @map("created_at")

  // Relations
  fromUser  User      @relation("SentConnections", fields: [fromId], references: [id], onDelete: Cascade)
  toUser    User      @relation("ReceivedConnections", fields: [toId], references: [id], onDelete: Cascade)

  @@id([fromId, toId])
  @@map("connection")
}

model PushSubscription {
  endpoint   String    @id
  userId     BigInt?   @map("user_id")
  keys       Json
  createdAt  DateTime  @default(now()) @map("created_at")
  
  // Relations
  user       User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("push_subscriptions")
}